<?php

/**
 * @file
 * OpenEuropa Authentication module.
 */

declare(strict_types = 1);

use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;

/**
 * Implements hook_user_cancel_methods_alter().
 *
 * Remove the option to delete users while keeping the option to block them.
 */
function oe_authentication_user_cancel_methods_alter(&$methods) {
  if (\Drupal::currentUser()->id() == 1) {
    return;
  }
  $restricted_options = [
    'user_cancel_reassign',
    'user_cancel_delete',
  ];
  foreach ($restricted_options as $restricted_option) {
    unset($methods[$restricted_option]);
  }
}

/**
 * Implements hook_entity_base_field_info().
 *
 * Add custom EULogin fields.
 */
function oe_authentication_entity_base_field_info(EntityTypeInterface $entity_type) {
  if ($entity_type->id() != 'user') {
    return [];
  }
  $custom_fields = [
    '7' => [
      'machine_name' => 'field_oe_firstname',
      'name' => t('First Name'),
      'description' => t("User's first name."),
    ],
    '8' => [
      'machine_name' => 'field_oe_lastname',
      'name' => t('Last Name'),
      'description' => t("User's last name."),
    ],
    '9' => [
      'machine_name' => 'field_oe_department',
      'name' => t('Department'),
      'description' => t("User's department."),
    ],
    '10' => [
      'machine_name' => 'field_oe_organisation',
      'name' => t('Organisation'),
      'description' => t("User's organisation."),
    ],
  ];

  $fields = [];
  foreach ($custom_fields as $weight => $field) {
    $fields[$field['machine_name']] = BaseFieldDefinition::create('string')
      ->setLabel($field['name'])
      ->setDescription($field['description'])
      ->setSettings([
        'default_value' => '',
        'max_length' => 255,
      ])
      ->setDisplayOptions('form', [
        'weight' => $weight,
        'region' => 'disabled',
      ])
      ->setDisplayOptions('view', [
        'weight' => $weight,
        'region' => 'disabled',
      ])
      ->setDisplayConfigurable('form', TRUE)
      ->setDisplayConfigurable('view', TRUE);
  }
  return $fields;
}

/**
 * Implements hook_menu_local_actions_alter().
 *
 * Change the title for the Add Cas users link added by the Cas module.
 */
function oe_authentication_menu_local_actions_alter(&$local_actions) {
  if (isset($local_actions['cas.bulk_add_cas_users'])) {
    $local_actions['cas.bulk_add_cas_users']['title'] = t('Add EU Login user');
  }
}

/**
 * Implements hook_form_form_id_alter().
 *
 * Replace CAS from strings in the "bulk add users" form.
 */
function oe_authentication_form_bulk_add_cas_users_alter(&$form, &$form_state, $form_id) {

  if (isset($form['intro']['#markup'])) {
    $form['intro']['#markup'] = t('Use this form to pre-register one or more users, allowing them to log in using EU Login.');
  }

  if (isset($form['cas_usernames']['#title'])) {
    $form['cas_usernames']['#title'] = t('EU Login username(s)');
  }

  if (isset($form['roles']['#description'])) {
    $form['roles']['#description'] = t('Optionally assign one or more roles to each user. Note that if you have EU Login configured to assign roles during automatic registration on login, those will be ignored.');
  }

  if (isset($form['extra_info']['#markup'])) {
    $form['extra_info']['#markup'] = t('Note that because EU Login attributes are only available when a user has logged in, any role or field assignment based on attributes will not be available using this form.');
  }
}
